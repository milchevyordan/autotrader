<?php

declare(strict_types=1);

namespace App\Services\Dashboard\Boxes\Builders;

use App\Enums\CacheTag;
use App\Models\PurchaseOrder;
use App\Models\Quote;
use App\Models\QuoteInvitation;
use App\Models\SalesOrder;
use App\Models\ServiceOrder;
use App\Models\ServiceVehicle;
use App\Services\Dashboard\Boxes\Builders\Enums\DataTableMethod;
use App\Services\Dashboard\Boxes\Interfaces\BoxWithRedFlagInterface;
use App\Services\Dashboard\Boxes\Interfaces\ShouldBeCachedInterface;
use App\Services\DataTable\DataTable;
use App\Services\PurchaseOrderService;
use App\Services\QuoteInvitationService;
use App\Services\QuoteService;
use App\Services\SalesOrderService;
use App\Services\ServiceOrderService;
use App\Services\Vehicles\ServiceVehicleService;
use App\Services\Vehicles\SystemVehicleService;
use BadMethodCallException;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Route;

abstract class BoxBuilder
{
    /**
     * @return Builder
     */
    abstract public function getBuilder(): Builder;

    /**
     * @return DataTableMethod
     */
    abstract protected function getDataTableMethod(): DataTableMethod;

    /**
     * Main builder in dataTable view, accepts the value of filterBuilder or redFlagsBuilder based on route.
     *
     * @var Builder
     */
    public Builder $dataTableBuilder;

    public DataTableMethod $dataTableMethod;

    /**
     * @var int
     */
    public int $count;

    /**
     * @var null|int
     */
    public ?int $redFlagsCount = null;

    public function __construct()
    {
        $this->dataTableMethod = $this->getDataTableMethod();

        $this->initFlagsOrBasicTable();

        if ($this instanceof ShouldBeCachedInterface) {
            $this->loadCachedValues();
        } else {
            $this->initBuilderValues();
            $this->cacheValues();
        }
    }

    /**
     * Initiate dataTableBuilder based on current route.
     *
     * @return void
     */
    public function initFlagsOrBasicTable(): void
    {
        $this->dataTableBuilder = Route::currentRouteName() === 'dashboard-boxes.flags' && $this instanceof BoxWithRedFlagInterface ? $this->getRedFlagBuilder() : $this->getBuilder();
    }

    /**
     * Converts the builder to a data table representation based on its type.
     *
     * @return mixed                  the data table representation generated by the corresponding method
     * @throws BadMethodCallException if the specified data table type method does not exist
     */
    public function toDataTable(): mixed
    {
        if (method_exists($this, $this->dataTableMethod->value)) {
            return $this->{ $this->dataTableMethod->value}();
        }

        throw new BadMethodCallException("Method {$ {$this}->dataTableMethod->value} does not exist in ".__CLASS__);
    }

    /**
     * Creates and configures a DataTable instance for vehicles.
     *
     * @return DataTable<Vehicle> the configured DataTable instance
     */
    protected function vehiclesDataTable(): DataTable
    {
        return (new DataTable(
            $this->dataTableBuilder
        ))
            ->setRelation('make', ['id', 'name'])
            ->setRelation('vehicleModel', ['id', 'name'])
            ->setRelation('engine', ['id', 'name'])
            ->setRelation('creator')
            ->setRelation('workflow', ['id', 'vehicleable_type', 'vehicleable_id'])
            ->setColumn('action', __('Action'))
            ->setColumn('id', '#', true, true)
            ->setColumn('vin', __('VIN'), true, true)
            ->setColumn('creator.full_name', __('Creator'), true)
            ->setColumn('make.name', __('Make'), true, true)
            ->setColumn('vehicleModel.name', __('Model'), true, true)
            ->setColumn('engine.name', __('Engine'), true, true)
            ->setColumn('kw', __('KW'), true, true)
            ->setColumn('hp', __('HP'), true, true)
            ->setColumn('co2_wltp', __('WLTP'), true, true)
            ->setTimestamps()
            ->advancedSearch(function ($query) {
                SystemVehicleService::advancedSearch($query);
            });
    }

    /**
     * Creates and configures a DataTable instance for service vehicles.
     *
     * @return DataTable<ServiceVehicle> the configured DataTable instance
     */
    protected function serviceVehiclesDataTable(): DataTable
    {
        return ServiceVehicleService::getserviceVehiclesDataTableByBuilder($this->dataTableBuilder, true);
    }

    /**
     * Creates and configures a DataTable instance for Purchase orders.
     *
     * @return DataTable<PurchaseOrder> the configured DataTable instance
     */
    protected function purchaseOrdersDataTable(): DataTable
    {
        return PurchaseOrderService::getPurchaseOrdersDataTableByBuilder($this->dataTableBuilder, true);
    }

    /**
     * Creates and configures a DataTable instance for Sales orders.
     *
     * @return DataTable<SalesOrder> the configured DataTable instance
     */
    protected function salesOrdersDataTable(): DataTable
    {
        return SalesOrderService::getSalesOrdersDataTableByBuilder($this->dataTableBuilder, true);
    }

    /**
     * Creates and configures a DataTable instance for Service orders.
     *
     * @return DataTable<ServiceOrder> the configured DataTable instance
     */
    protected function serviceOrdersDataTable(): DataTable
    {
        return ServiceOrderService::getServiceOrdersDataTableByBuilder($this->dataTableBuilder, true);
    }

    /**
     * Creates and configures a DataTable instance for Quote invitations orders.
     *
     * @return DataTable<QuoteInvitation> the configured DataTable instance
     */
    protected function quoteInvitationsDataTable(): DataTable
    {
        return QuoteInvitationService::getQuoteInvitationsDataTableByBuilder($this->dataTableBuilder);
    }

    /**
     * Creates and configures a DataTable instance for Quotes.
     *
     * @return DataTable<Quote> the configured DataTable instance
     */
    protected function quotesDataTable(): DataTable
    {
        return QuoteService::getQuotesDataTableByBuilder($this->dataTableBuilder, true);
    }

    /**
     * Load cached values if available; otherwise, compute and cache them.
     */
    private function loadCachedValues(): void
    {
        $cacheKey = $this->getCacheKey();
        $cacheTags = $this->getCacheTags();

        $cachedData = Cache::tags($cacheTags)->get($cacheKey);

        if ($cachedData) {
            [$this->count, $this->redFlagsCount] = [$cachedData['count'], $cachedData['redFlagsCount']];

            return;
        }

        $this->initBuilderValues();

    }

    /**
     * @return BoxBuilder
     */
    public function initBuilderValues(): self
    {
        $this->count = $this->getBuilder()->count();

        if ($this instanceof BoxWithRedFlagInterface) {
            $this->redFlagsCount = $this->getRedFlagBuilder()->count();
        }

        return $this;

    }

    /**
     * Cache the count and redFlagsCount.
     */
    public function cacheValues(): self
    {
        Cache::tags($this->getCacheTags())->put(
            $this->getCacheKey(),
            [
                'count'         => $this->count,
                'redFlagsCount' => $this->redFlagsCount,
            ],
            now()->addMinutes(10)
        );

        return $this;
    }

    /**
     * Get the cache key for this instance.
     */
    private function getCacheKey(): string
    {
        return static::class;
    }

    /**
     * Get the cache tags for this instance.
     */
    private function getCacheTags(): array
    {
        return [CacheTag::Dashboard_boxes->name.'_'.Auth::id()];
    }
}
